An√°lisis de Evasi√≥n de Clientes - Telecom X
Descripcion de la problematica: Telecom X es una empresa de telecomunicaciones actua como un analista de datos para ayudar a la empresa est√° enfrentando un alto √≠ndice de evasi√≥n de clientes y a√∫n no han identificado el problema de esta evasi√≥n.

Extracci√≥n üìÅ
Se extrajeron los datos del archivo JSON TelecomX_Data.json. Este archivo contiene informaci√≥n detallada sobre los clientes, incluyendo datos demogr√°ficos, servicios contratados, informaci√≥n de la cuenta y si el cliente ha cancelado o no su suscripci√≥n (churn).

Importacion de las librer√≠as necesarias para el an√°lisis y la visualizaci√≥n de datos.

[ ]
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Configuraci√≥n de estilo para los gr√°ficos
sns.set_style("whitegrid")
Cargar los datos Carga el archivo TelecomX_Data.json en un DataFrame de pandas

[ ]
# Cargar los datos desde el archivo JSON
try:
    # Cargar los datos desde el archivo JSON
    # Aseg√∫rese de cargar primero ‚ÄúTelecomX_Data.json‚Äù en el entorno Colab.
    df = pd.read_json("/content/drive/MyDrive/Data_Science/Pandas/TelecomX_Data.json")
    print("Datos cargados exitosamente.")
    print("Dimensiones del DataFrame:", df.shape)

    # Mostrar las primeras filas para entender la estructura
    print("\nPrimeras 5 filas del DataFrame:")
    display(df.head())

    # Ver la informaci√≥n general del DataFrame
    print("\nInformaci√≥n del DataFrame:")
    df.info()

except FileNotFoundError:
    print("Error: El archivo 'TelecomX_Data.json' no se encontr√≥.")
    print("Please upload the 'TelecomX_Data.json' file to your Colab environment.")
except Exception as e:
    print(f"An error occurred: {e}")

Transformaci√≥n üîÑ
3.Limpieza y preprocesamiento de los datos


[ ]
# --- 1. Aplanar la estructura JSON anidada ---
# Los datos de cliente, cuenta y servicios est√°n en columnas anidadas.
# Los aplanaremos para facilitar el acceso.

df_customer = pd.json_normalize(df['customer'])
df_account = pd.json_normalize(df['account'])
df_phone_services = pd.json_normalize(df['phone'])
df_internet_services = pd.json_normalize(df['internet'])

# Unir los dataframes aplanados en uno solo
# Add customerID and Churn from the original dataframe
df_clean = pd.concat([df[['customerID', 'Churn']], df_customer, df_account, df_phone_services, df_internet_services], axis=1)

print("DataFrame aplanado y combinado:")
print(df_clean.head())


# --- 2. Manejo de valores faltantes en 'Churn' ---
# Reemplazar valores vac√≠os ('') en 'Churn' con NaN para poder eliminarlos f√°cilmente
df_clean['Churn'] = df_clean['Churn'].replace('', np.nan)
df_clean.dropna(subset=['Churn'], inplace=True)
print(f"\nRegistros despu√©s de eliminar 'Churn' vac√≠os: {len(df_clean)}")


# --- 3. Conversi√≥n de 'Charges.Total' a num√©rico ---
# La columna 'Charges.Total' es de tipo objeto y tiene espacios en blanco
df_clean['Charges.Total'] = pd.to_numeric(df_clean['Charges.Total'], errors='coerce')
# Rellenar los valores nulos (que eran espacios) con 0.
# Esto asume que los clientes nuevos no tienen cargos totales.
df_clean['Charges.Total'].fillna(0, inplace=True)
print("\nValores nulos en 'Charges.Total' despu√©s de la limpieza:", df_clean['Charges.Total'].isnull().sum())


# --- 4. Transformar 'SeniorCitizen' a categ√≥rico ---
df_clean['SeniorCitizen'] = df_clean['SeniorCitizen'].map({0: 'No', 1: 'S√≠'})
print("\nValores √∫nicos en 'SeniorCitizen' despu√©s de la transformaci√≥n:")
print(df_clean['SeniorCitizen'].unique())

print("\nLimpieza y transformaci√≥n completadas.")
DataFrame aplanado y combinado:
   customerID Churn  gender  SeniorCitizen Partner Dependents  tenure  \
0  0002-ORFBO    No  Female              0     Yes        Yes       9   
1  0003-MKNFE    No    Male              0      No         No       9   
2  0004-TLHLJ   Yes    Male              0      No         No       4   
3  0011-IGKFF   Yes    Male              1     Yes         No      13   
4  0013-EXCHZ   Yes  Female              1     Yes         No       3   

         Contract PaperlessBilling     PaymentMethod  ...  Charges.Total  \
0        One year              Yes      Mailed check  ...          593.3   
1  Month-to-month               No      Mailed check  ...          542.4   
2  Month-to-month              Yes  Electronic check  ...         280.85   
3  Month-to-month              Yes  Electronic check  ...        1237.85   
4  Month-to-month              Yes      Mailed check  ...          267.4   

  PhoneService MultipleLines InternetService OnlineSecurity OnlineBackup  \
0          Yes            No             DSL             No          Yes   
1          Yes           Yes             DSL             No           No   
2          Yes            No     Fiber optic             No           No   
3          Yes            No     Fiber optic             No          Yes   
4          Yes            No     Fiber optic             No           No   

  DeviceProtection TechSupport StreamingTV StreamingMovies  
0               No         Yes         Yes              No  
1               No          No          No             Yes  
2              Yes          No          No              No  
3              Yes          No         Yes             Yes  
4               No         Yes         Yes              No  

[5 rows x 21 columns]

Registros despu√©s de eliminar 'Churn' vac√≠os: 7043

Valores nulos en 'Charges.Total' despu√©s de la limpieza: 0

Valores √∫nicos en 'SeniorCitizen' despu√©s de la transformaci√≥n:
['No' 'S√≠']

Limpieza y transformaci√≥n completadas.
/tmp/ipython-input-5-3025604194.py:30: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.

For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.


  df_clean['Charges.Total'].fillna(0, inplace=True)
Carga y An√°lisis Exploratorio (EDA) üîç
Elemento de la lista
Validaremos primero, la proporcion de clientes que ha cancelado el servicio.


[ ]
plt.figure(figsize=(8, 6))
sns.countplot(x='Churn', data=df_clean, palette='ocean')
plt.title('Distribuci√≥n de Evasi√≥n de Clientes (Churn)', fontsize=16)
plt.xlabel('¬øCancel√≥ el servicio?', fontsize=12)
plt.ylabel('N√∫mero de Clientes', fontsize=12)

# A√±adir porcentajes en las barras
total = len(df_clean)
for p in plt.gca().patches:
    percentage = '{:.1f}%'.format(100 * p.get_height()/total)
    x = p.get_x() + p.get_width() / 2
    y = p.get_height()
    plt.gca().annotate(percentage, (x, y), ha='center', va='bottom', fontsize=12)

plt.show()

5.An√°lisis por perfil demogr√°fico del cliente

Analicemos c√≥mo se relaciona la evasi√≥n con las caracter√≠sticas demogr√°ficas.


[ ]
# Gr√°ficos para analizar el churn por variables demogr√°ficas
fig, axes = plt.subplots(1, 3, figsize=(20, 6))
fig.suptitle('An√°lisis de Evasi√≥n por Perfil Demogr√°fico', fontsize=18)

# G√©nero
sns.countplot(ax=axes[0], x='gender', hue='Churn', data=df_clean, palette='ocean')
axes[0].set_title('Evasi√≥n por G√©nero')
axes[0].set_xlabel('G√©nero')
axes[0].set_ylabel('N√∫mero de Clientes')

# Adulto Mayor (Senior Citizen)
sns.countplot(ax=axes[1], x='SeniorCitizen', hue='Churn', data=df_clean, palette='ocean')
axes[1].set_title('Evasi√≥n por Adulto Mayor')
axes[1].set_xlabel('¬øEs Adulto Mayor?')
axes[1].set_ylabel('')

# Dependientes
sns.countplot(ax=axes[2], x='Dependents', hue='Churn', data=df_clean, palette='ocean')
axes[2].set_title('Evasi√≥n por Dependientes')
axes[2].set_xlabel('¬øTiene Dependientes?')
axes[2].set_ylabel('')

plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.show()

6.An√°lisis por tipo de contrato y facturaci√≥n

El tipo de contrato y el m√©todo de pago son factores clave.


[ ]
# Gr√°ficos para analizar el churn por tipo de contrato y facturaci√≥n
fig, axes = plt.subplots(1, 3, figsize=(22, 7))
fig.suptitle('An√°lisis de Evasi√≥n por Contrato y Facturaci√≥n', fontsize=18)

# Tipo de Contrato
sns.countplot(ax=axes[0], x='Contract', hue='Churn', data=df_clean, palette='ocean')
axes[0].set_title('Evasi√≥n por Tipo de Contrato')
axes[0].set_xlabel('Tipo de Contrato')
axes[0].set_ylabel('N√∫mero de Clientes')

# M√©todo de Pago
sns.countplot(ax=axes[1], y='PaymentMethod', hue='Churn', data=df_clean, palette='ocean')
axes[1].set_title('Evasi√≥n por M√©todo de Pago')
axes[1].set_xlabel('N√∫mero de Clientes')
axes[1].set_ylabel('M√©todo de Pago')

# Facturaci√≥n sin papel (Paperless Billing)
sns.countplot(ax=axes[2], x='PaperlessBilling', hue='Churn', data=df_clean, palette='ocean')
axes[2].set_title('Evasi√≥n por Facturaci√≥n Electr√≥nica')
axes[2].set_xlabel('¬øFacturaci√≥n Electr√≥nica?')
axes[2].set_ylabel('')

plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.show()

7.An√°lisis por servicios contratados (Internet)

Investiguemos si el tipo de servicio de internet y los servicios adicionales influyen.


[ ]
# Filtrar solo clientes con servicio de internet para analizar servicios adicionales
internet_customers = df_clean[df_clean['InternetService'] != 'No']

fig, axes = plt.subplots(2, 2, figsize=(16, 12))
fig.suptitle('An√°lisis de Evasi√≥n por Servicios de Internet', fontsize=18)

# Tipo de Servicio de Internet
sns.countplot(ax=axes[0, 0], x='InternetService', hue='Churn', data=df_clean, palette='ocean')
axes[0, 0].set_title('Evasi√≥n por Tipo de Servicio de Internet')
axes[0, 0].set_xlabel('Servicio de Internet')
axes[0, 0].set_ylabel('N√∫mero de Clientes')

# Seguridad Online
sns.countplot(ax=axes[0, 1], x='OnlineSecurity', hue='Churn', data=internet_customers, palette='ocean')
axes[0, 1].set_title('Evasi√≥n por Seguridad Online')
axes[0, 1].set_xlabel('¬øTiene Seguridad Online?')
axes[0, 1].set_ylabel('')

# Respaldo Online
sns.countplot(ax=axes[1, 0], x='OnlineBackup', hue='Churn', data=internet_customers, palette='ocean')
axes[1, 0].set_title('Evasi√≥n por Respaldo Online')
axes[1, 0].set_xlabel('¬øTiene Respaldo Online?')
axes[1, 0].set_ylabel('N√∫mero de Clientes')

# Soporte T√©cnico
sns.countplot(ax=axes[1, 1], x='TechSupport', hue='Churn', data=internet_customers, palette='ocean')
axes[1, 1].set_title('Evasi√≥n por Soporte T√©cnico')
axes[1, 1].set_xlabel('¬øTiene Soporte T√©cnico?')
axes[1, 1].set_ylabel('')

plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.show()

8.An√°lisis por cargos mensuales y totales.

Finalmente, veamos la relaci√≥n entre los montos facturados y la evasi√≥n.


[ ]
fig, axes = plt.subplots(1, 2, figsize=(18, 7))
fig.suptitle('An√°lisis de Evasi√≥n por Cargos', fontsize=18)

# Cargos Mensuales (MonthlyCharges)
sns.kdeplot(ax=axes[0], x='Charges.Monthly', hue='Churn', data=df_clean, fill=True, common_norm=False, palette='ocean')
axes[0].set_title('Distribuci√≥n de Cargos Mensuales por Evasi√≥n')
axes[0].set_xlabel('Cargos Mensuales')
axes[0].set_ylabel('Densidad')

# Cargos Totales (TotalCharges)
sns.kdeplot(ax=axes[1], x='Charges.Total', hue='Churn', data=df_clean, fill=True, common_norm=False, palette='ocean')
axes[1].set_title('Distribuci√≥n de Cargos Totales por Evasi√≥n')
axes[1].set_xlabel('Cargos Totales')
axes[1].set_ylabel('')

plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.show()

Informe Final ‚úÖ
Conclusiones del An√°lisis Exploratorio

Basado en la visualizaci√≥n de los datos, los principales indicadores de una posible evasi√≥n de clientes son:

Tipo de Contrato: Los clientes con contratos de mes a mes tienen una tasa de cancelaci√≥n dr√°sticamente superior. Esta es la variable predictora m√°s fuerte.
Servicio de Internet: Los clientes con Fibra √ìptica son mucho m√°s propensos a cancelar, lo que podr√≠a se√±alar problemas de precio, calidad o expectativas no cumplidas con este servicio.
M√©todo de Pago: El pago con Cheque Electr√≥nico est√° fuertemente correlacionado con la evasi√≥n.
Servicios de Protecci√≥n y Soporte: La ausencia de servicios como Seguridad Online, Respaldo Online y Soporte T√©cnico aumenta la probabilidad de evasi√≥n en clientes con servicio de internet.
Cargos Mensuales: Cargos mensuales m√°s altos, especialmente alrededor de los 70‚àí100, muestran una mayor densidad de clientes que cancelan.
Perfil Demogr√°fico: Los adultos mayores (Senior Citizens) y los clientes sin pareja o dependientes son m√°s propensos a la evasi√≥n.
Basado en el an√°lisis exploratorio de los datos, se han identificado varios factores clave que parecen estar correlacionados con una mayor tasa de evasi√≥n de clientes en Telecom X.

Principales Hallazgos:

Contratos a Corto Plazo: El factor m√°s influyente en la evasi√≥n de clientes es el tipo de contrato. Los clientes con contratos de mes a mes son mucho m√°s propensos a cancelar el servicio.
Servicio de Fibra √ìptica: A pesar de ser un servicio premium, los clientes con fibra √≥ptica muestran una tasa de evasi√≥n muy alta. Esto podr√≠a indicar problemas de calidad, precio o expectativas no cumplidas con este servicio.
Cheque Electr√≥nico como M√©todo de Pago: El uso de cheque electr√≥nico como m√©todo de pago est√° fuertemente asociado con la evasi√≥n. Esto podr√≠a estar relacionado con problemas en el proceso de pago o con el perfil de cliente que prefiere este m√©todo.
Clientes sin Servicios de Soporte y Seguridad: La falta de servicios de valor agregado como soporte t√©cnico, seguridad y respaldo en l√≠nea parece ser un indicador de riesgo de evasi√≥n.
Perfil del Cliente: Clientes adultos mayores, solteros y sin dependientes son m√°s propensos a la evasi√≥n.
Recomendaciones

Luego de esto podemos recomendar:

Servicios y Contratos

Servicio Telef√≥nico y M√∫ltiples L√≠neas: La evasi√≥n es ligeramente mayor en clientes con m√∫ltiples l√≠neas telef√≥nicas.
Servicio de Internet: Los clientes con servicio de fibra √≥ptica tienen una tasa de evasi√≥n significativamente m√°s alta en comparaci√≥n con aquellos que tienen DSL o no tienen servicio de internet.
Servicios Adicionales de Internet: Clientes sin servicios de respaldo en l√≠nea (OnlineBackup), seguridad en l√≠nea (OnlineSecurity) y soporte t√©cnico (TechSupport) muestran una mayor propensi√≥n a la evasi√≥n.
Tipo de Contrato: La evasi√≥n es dr√°sticamente m√°s alta entre los clientes con contratos de mes a mes en comparaci√≥n con los contratos de uno o dos a√±os.
Facturaci√≥n y Pagos

Facturaci√≥n Electr√≥nica (PaperlessBilling): Los clientes que utilizan facturaci√≥n electr√≥nica tienen una mayor tasa de evasi√≥n.
M√©todo de Pago: Los clientes que pagan con cheque electr√≥nico (Electronic check) tienen la tasa de evasi√≥n m√°s alta en comparaci√≥n con otros m√©todos de pago.
Cargos Mensuales y Totales: Se observa una tendencia donde a mayores cargos mensuales, mayor es la probabilidad de evasi√≥n.
Recomendaciones para el Equipo de Ciencia de Datos:

Se recomienda que el equipo de ciencia de datos profundice en estos hallazgos para construir un modelo predictivo de evasi√≥n. Sugerimos las siguientes acciones:

An√°lisis de Sentimiento: Si se dispone de datos de texto (ej. encuestas de satisfacci√≥n, transcripciones de llamadas), realizar un an√°lisis de sentimiento para entender mejor la insatisfacci√≥n de los clientes, especialmente aquellos con fibra √≥ptica.
Ingenier√≠a de Caracter√≠sticas: Crear nuevas variables que puedan capturar de manera m√°s efectiva el comportamiento del cliente. Por ejemplo, una variable que combine el tipo de contrato con el m√©todo de pago.
Modelado Predictivo: Utilizar los factores identificados como variables predictoras en modelos de clasificaci√≥n para predecir la probabilidad de evasi√≥n de un cliente.
